# serverless.yml
service: affordability-api-backend

plugins:
  - serverless-offline

custom:
  serverless-offline:
    httpPort: ${env:LOCAL_API_PORT, 3000} # Uses env var, defaults to 3000

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-central-1
  httpApi:
    cors: true # Enable CORS for all HTTP API endpoints
  # iam:
  #   role:
  #     statements:
  #       - Effect: "Allow"
  #         Action: "lambda:InvokeFunction"
  #         Resource: "arn:aws:lambda:${aws:region}:${aws:accountId}:function:${self:service}-${sls:stage}-processTinkData"

  environment:
    TINK_CLIENT_ID: ${env:TINK_CLIENT_ID}
    TINK_CLIENT_SECRET: ${env:TINK_CLIENT_SECRET}
    PORTAL_HOST: ${env:PORTAL_HOST}
    JWT_SECRET: ${env:JWT_SECRET}
    JWT_EXPIRATION_TIME: ${env:JWT_EXPIRATION_TIME}
    STRIPE_SECRET_KEY: ${env:STRIPE_SECRET_KEY}
    STRIPE_WEBHOOK_SECRET: ${env:STRIPE_WEBHOOK_SECRET, 'local-secret'}

functions:
  # This single function handles all API requests via the Express app.
  api:
    handler: app.handler
    events:
      - httpApi:
          path: /{proxy+}
          method: '*'

  # This function is not triggered by HTTP and is used for background processing.
  processTinkData:
    handler: handlers/processTinkData.processTinkData